type User
    @model(mutations: { create: null })
    @auth(rules: [{ allow: owner }]) {
    id: ID!
    username: AWSEmail! # email address is used as an username
    displayName: String! # display this name on the frontend so email is not exposed
    homes: [HomeOwner] @connection(keyName: "byHomeOwner", fields: ["id"])
    responses: [UserResponse] @connection(keyName: "byUser", fields: ["id"])
}

# Create a join model and disable queries as we don't need them
# can query through User.homes and Home.owners
type HomeOwner
    @model(queries: null)
    @auth(rules: [{ allow: owner }])
    @key(name: "byHome", fields: ["homeID", "homeOwnerID"]) 
    @key(name: "byHomeOwner", fields: ["homeOwnerID", "homeID"]) {
    id: ID!
    homeID: ID!
    homeOwnerID: ID!
    home: Home! @connection(fields: ["homeID"])
    homeOwner: User! @connection(fields: ["homeOwnerID"])
}

enum HeatingFuelType {
    GAS
    ELECTRIC
    PROPANE
    OTHER
}

enum WaterHeaterFuelType {
    GAS
    ELECTRIC
    OTHER
}

enum AgeType {
    LESS_THAN_5,
    MORE_THAN_5,
    MORE_THAN_10,
    MORE_THAN_20
}

type Home 
    @model 
    @auth(rules: [
        { allow: owner }, # defaults to use the "owner" field, can access any operation
        { allow: owner, ownerField: "homeowners", operations: [update, read]} # all other homeowners can update and read
    ]){
    id: ID!
    homeOwners: [HomeOwner] @connection(keyName: "byHome", fields: ["id"])
    responses: [Response] @connection(keyName: "byHome", fields: ["id"])
    addressLine1: String
    addressLine2: String
    city: String
    addressState: String
    country: String # only support united states for now
    zipcode: String!
    yearBuilt: Int
    outDoorArea: Float
    livableArea: Float!
    bedroomCount: Int!
    bathroomCount: Int
    heatingFuelType: HeatingFuelType
    heaterAge: AgeType
    waterHeaterFuelType: WaterHeaterFuelType
    waterHeaterAge: AgeType
    hasAirConditioner: Boolean
    hasPool: Boolean
    hasHotTub: Boolean
    annualElectricalEnergyUsage: Float
    annualGasPropaneEnergyUsage: Float
    annualWaterUsage: Float
}

enum Category {
    ENERGY
    RESILIENCY
    HEALTH
    WATER
}

enum Level {
    STARTER
    INTERMEDIATE
    GURU
}

enum Cost {
    ONE
    TWO
    THREE
}

enum ResponseType {
    USER
    HOME
}

# All questions currently are of type yes/no
type Question 
    @model 
    @auth(rules: [
        { allow: owner }, # defaults to use the "owner" field, can access any operation
        { allow: groups, groups: ["Admin"] }, # Admin users can access any operation
        { allow: private, operations: [read] },  # allow all authenticated users (Cognito User Pools) to read
        { allow: private, provider: iam, operations: [create, read] } # IAM (Lambda functions) can create and read
    ]) {
    id: ID!
    title: String! # short title of the question
    questionText: String! # the content of the question
    rewardText: String! # statement if the question is completed
    level: Level!
    cost: Cost!
    categories: [Category!]!
    type: ResponseType!
}

# A home's response to a question
# query all of a home's responses: home.responses (a home has responses for some questions)
# query all of a question's responses: question.responses (a question has responses from various homes, p.s. currently not needed for user app, but might be helpful for future analytics)
# sort recent activities by createdAt:
# query GetRecentActivities {
#     getResponsesByCreatedAt(homeID: "some_home_id", limit: 10, sortDirection: DESC) {
#         items {
#             id
#             homeID
#             questionID
#             answer
#             createdAt
#             updatedAt
#             question {
#                 id
#                 title
#             }
#         }
#     }
# }   


# A User's response to a question
# query all of a User's responses: user.responses (a user has responses for some questions)
# query all of a question's responses: question.responses (a question has responses from various users, p.s. currently not needed for user app, but might be helpful for future analytics)
# sort recent activities by createdAt:
# query GetRecentUserActivities {
#     getUserResponsesByCreatedAt(userID: "some_user_id", limit: 10, sortDirection: DESC) {
#         items {
#             id
#             userID
#             questionID
#             answer
#             createdAt
#             updatedAt
#             question {
#                 id
#                 title
#             }
#         }
#     }
# }   

type Response 
    @model
    @key(name: "byHome", fields: ["homeID", "questionID"]) 
    @key(name: "byCreatedAt", fields: ["homeID", "createdAt"], queryField: "getResponsesByCreatedAt")
    @auth(rules: [
        { allow: owner }, # defaults to use the "owner" field
        { allow: groups, groups: ["Admin"] }  # Admin users can access any operation
    ]) {
    id: ID!
    homeID: ID!
    questionID: ID!
    home: Home @connection(fields: ["homeID"])
    question: Question @connection(fields: ["questionID"])
    answer: String!
    createdAt: AWSDateTime!
}

type UserResponse 
    @model
    @key(name: "byUser", fields: ["userID", "questionID"]) 
    @key(name: "byCreatedAt", fields: ["userID", "createdAt"], queryField: "getUserResponsesByCreatedAt")
    @auth(rules: [
        { allow: owner }, # defaults to use the "owner" field
        { allow: groups, groups: ["Admin"] }  # Admin users can access any operation
    ]) {
    id: ID!
    userID: ID!
    questionID: ID!
    user: User @connection(fields: ["userID"])
    question: Question @connection(fields: ["questionID"])
    answer: String!
    createdAt: AWSDateTime!
}

# used to hold info for any assets/images in S3
# will be used for future image uploads (user generated/dynamic assets)
type S3Object {
    bucket: String!
    region: String!
    key: String!
}

